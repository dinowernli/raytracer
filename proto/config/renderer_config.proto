// The MIT License (MIT)
//
// Copyright (c) 2015 dinowernli
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package raytracer;

message RendererConfig {
  enum SamplerType {
    SCANLINE = 0;
    PROGRESSIVE = 1;
  }

  // The number of worker threads used in the renderer.
  optional uint64 threads = 1;

  // Whether or not to ignore lights which are occluded.
  optional bool shadows = 2;

  // How deep to evaluate reflection and refraction. Depth 0 means that no
  // reflection and refraction rays are shot recursively.
  optional uint64 recursion_depth = 3 [default = 10];

  // The root of the number of jittered rays to shoot through each pixel.
  optional int32 root_rays_per_pixel = 4 [default = 1];

  optional SamplerType sampler_type = 5 [default = PROGRESSIVE];

  optional double adaptive_supersampling_threshold = 6 [default = -1];

  // Path to at which to store a heatmap image of num samples per pixel.
  optional string sampling_heatmap_path = 7;
}
